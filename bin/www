'use strict';

var app = require('../app');
var http = require('http');

new app()
  .then((main)=> {
        
    var server = main.server;
    var port = process.env.PORT || 5000;


    /**
     * Event listener for HTTP server "error" event.
     */
    function onError (error, port) {
        if (error.syscall !== 'listen') {
            throw error;
        }

        var bind = typeof port === 'string'
            ? 'Pipe ' + port
            : 'Port ' + port;

        // handle specific listen errors with friendly messages
        switch (error.code) {
            case 'EACCES':
                console.error(bind + ' requires elevated privileges');
                process.exit(1);
                break;
            case 'EADDRINUSE':
                console.error(bind + ' is already in use');
                process.exit(1);
                break;
            default:
                throw error;
        }
    }

    /**
     * Event listener for HTTP server "listening" event.
     */
    function onListening (server) {
        var addr = server.address();
        var bind = typeof addr === 'string'
            ? 'pipe ' + addr
            : 'port ' + addr.port;
        console.log('Listening on ' + bind);
    }

    /**
     * Gracefully terminate programs
     */
    var gracefulExit = function gracefulExit () {
        console.log('exiting');
        process.exit(0);
    }



    /**
     * Create HTTP server.
     */
    // configure server callback
    server.on('error', function () {
        onError(port);
    });

    server.on('listening', function () {
        onListening(server)
    });

    process.on('SIGINT', gracefulExit).on('SIGTERM', gracefulExit);
    process.on('uncaughtException', function (err) {
        console.error('Caught exception: ' + err);
    });

    server.listen(port);
  })
  .catch((err)=>{
    throw err;
  });
